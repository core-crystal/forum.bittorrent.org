<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>forum.bittorrent.org / Multi Source Locator Service</title>
<link rel="stylesheet" type="text/css" href="style/Kontrast.css" />
</head>
<body>

<div id="punwrap">
<div id="punviewtopic" class="pun">

<div id="brdheader" class="block">
	<div class="box">
		<div id="brdtitle" class="inbox">
			<h1><span>forum.bittorrent.org</span></h1>
			<p><span>BitTorrent.org community</span></p>
		</div>
		<div id="brdmenu" class="inbox">
			<ul>
				<li id="navindex"><a href="index.php">Index</a></li>
				<li id="navextra1"><a href="http://forum.bittorrent.org">Homepage</a></li>
				<li id="navextra2"><a href="irc://irc.freenode.net/bittorrent">IRC</a></li>
				<li id="navuserlist"><a href="userlist.php">User list</a></li>
				<li id="navrules"><a href="misc.php?action=rules">Rules</a></li>
				<li id="navsearch"><a href="search.php">Search</a></li>
				<li id="navregister"><a href="register.php">Register</a></li>
				<li id="navlogin"><a href="login.php">Login</a></li>
			</ul>
		</div>
		<div id="brdwelcome" class="inbox">
			<p>You are not logged in.</p>
		</div>
	</div>
</div>

<div id="announce" class="block">
	<h2><span>Announcement</span></h2>
	<div class="box">
		<div class="inbox">
			<div>Posting about any illegal sharing of copyrighted content is strictly forbidden.</div>
		</div>
	</div>
</div>

<div class="linkst">
	<div class="inbox">
		<p class="pagelink conl">Pages: <strong>1</strong></p>
		<p class="postlink conr">&nbsp;</p>
		<ul><li><a href="index.php">Index</a></li><li>&nbsp;&raquo;&nbsp;<a href="viewforum.php?id=25">BEPs</a></li><li>&nbsp;&raquo;&nbsp;Multi Source Locator Service</li></ul>
		<div class="clearer"></div>
	</div>
</div>

<div id="p635" class="blockpost rowodd firstpost">
	<h2><span><span class="conr">#1&nbsp;</span><a href="viewtopic.php?pid=635#p635">2009-09-02 03:29:36</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=90545">Fredrik Neij</a></strong></dt>
					<dd class="usertitle"><strong>Member</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3>Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>The Achilles heel of BitTorrent is, (imho), the way multiple files are packed within a torrent-file, identified by the info_hash value. It's enough to rename a file, to add/remove a file in the torrent, for the identifying hash value to change. This means everytime a small change is made a new swarm has to be established and we are back at the initial source for the data to be distributed, even though the data might already exists in one or more existing swarm(s). <br /><br />This documents outlines my suggestions on how to solve this problem, to increase availability of files that exists in multiple swarms, or in swarms divided amongst multiple trackers. It also prolongs the life of swarms, and can revive stalled swarms if a client supporting this connects and sends data into the stalled swarm. <br /><br />The full text and documentation can be found at <a href="http://locator.tfr.org/wiki/" rel="nofollow">http://locator.tfr.org/wiki/</a> and some very simple examples at <a href="http://locator.tfr.org/" rel="nofollow">http://locator.tfr.org/</a> <br /><br />Comments and feedback would be much appreciated.<br /><br />// Fredrik</p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p643" class="blockpost roweven">
	<h2><span><span class="conr">#2&nbsp;</span><a href="viewtopic.php?pid=643#p643">2009-10-08 16:22:43</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89618">The 8472</a></strong></dt>
					<dd class="usertitle"><strong>Azureus Developer</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>the problem with this is that there is no way to verify that a file hash and the piece hashes actually describe the same thing. Thus they have to provided separately and have to be trusted as they cannot be verified until the file is done.<br /><br />Personally i think it would be better to impose some tighter restrictions on the info dictionary, such as file ordering, excluding filenames from the infodict and using uniform piece sizes or merkle tree hashing to have 1 infohash for 1 set of files. while this won't stop new infohashes from being created when files are added or removed it would still cut down on the unique infohashes per set of files significantly.</p>
				</div>
				<div class="postsignature"><hr />Az dev</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p666" class="blockpost rowodd">
	<h2><span><span class="conr">#3&nbsp;</span><a href="viewtopic.php?pid=666#p666">2009-10-15 16:03:17</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89602">arvid</a></strong></dt>
					<dd class="usertitle"><strong>Administrator</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>It would be simple enough to standardize the convention of including file hashes in the .torrent file. I think something like this would better be built in increments in order to get enough feedback and buy-in from client developers.<br /><br />having the possibility to move the filenames out of the info-dictionary and use file-hashes as filenames and require an ordering of the files would be one step closer to be able to join swarms created independently.<br /><br />Many of the problems would be solved by not creating multi-file torrents though.</p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p679" class="blockpost roweven">
	<h2><span><span class="conr">#4&nbsp;</span><a href="viewtopic.php?pid=679#p679">2009-10-15 18:34:18</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89618">The 8472</a></strong></dt>
					<dd class="usertitle"><strong>Azureus Developer</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>i think multi file torrents are a major feature of bittorrent as it does not force people to upload/download archives. Archives often are deleted after downloading and extracting them since they take up additional space.<br /><br />Having multiple files also allows for the inclusion of previews or direct previewing in the case of multimedia files.<br /><br />Batch-Torrents for previously provided individual releases also are a good side effect as large torrents generally experience longer life-cycles.<br /><br />I generally think that the advantages of multifile torrents outweigh the problems created by them and that the problems should be addressed in different ways.</p>
				</div>
				<div class="postsignature"><hr />Az dev</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p680" class="blockpost rowodd">
	<h2><span><span class="conr">#5&nbsp;</span><a href="viewtopic.php?pid=680#p680">2009-10-15 18:39:10</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89602">arvid</a></strong></dt>
					<dd class="usertitle"><strong>Administrator</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>My understanding is that it is relatively common for people to want to find multiple sources for files that happens to be in a multi-file torrent. This would be a much simpler problem if files that are likely to be downloaded individually would have their own torrent file and their own info-hash. Then many such files would automatically get a boost in sources from other people that created a torrent from the same file, independently (especially if the filename would be moved out of the info-dict).<br /><br />I agree that archives is not a good alternative to multi-file torrents, and I'm not saying that there are no good uses for multi-file torrents. But maybe there should be some obvious way of creating batches of .torrents, instead of creating single torrents with many large files where people are likely to pick just a few of them.</p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p689" class="blockpost roweven">
	<h2><span><span class="conr">#6&nbsp;</span><a href="viewtopic.php?pid=689#p689">2009-10-16 20:00:11</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89618">The 8472</a></strong></dt>
					<dd class="usertitle"><strong>Azureus Developer</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<blockquote><div class="incqbox"><h4>arvid wrote:</h4><p>My understanding is that it is relatively common for people to want to find multiple sources for files that happens to be in a multi-file torrent.</p></div></blockquote><p>Because the swarm they're using has a low availability. Which is (among other reasons) due to multiple torrents containing identical file(s).<br /><br /><br />And tbh, i don't think creating batches of torrents is a good solution, since everything in bittorrent revolves around the infohash. Things like piece picking, unchoking, DHT, peer exchange, tracker announces.. everything relies on or works most efficiently with a single ID (the infohash) being shared among all clients.<br /><br /><br />The infohash basically maps you to 1 big data blob that is as efficiently distributed as possible. Slicing that huge blob into a file is basically an &quot;output filter&quot; once you write it to the HDD. But that's it.<br />If you begin grabbing data from different swarms, only partial data sets etc. and try to fit that into the entire bittorrent system you basically end up with something that's not bittorrent anymore.<br /><br /><br />On the protocol-side the only real solution is minimizing the amount of infohashes that can represent the same blob of data.<br /><br /><br />On the client side we can do other things, like making it easy for users to add different torrents that handle the same data files, find files matching the new torrent automatically or things like that.</p>
				</div>
				<div class="postsignature"><hr />Az dev</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p710" class="blockpost rowodd">
	<h2><span><span class="conr">#7&nbsp;</span><a href="viewtopic.php?pid=710#p710">2009-10-25 02:52:20</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=90545">Fredrik Neij</a></strong></dt>
					<dd class="usertitle"><strong>Member</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>On the protocol side the I think you can do one of two things,<br /><br />1. To move the filenames out of the info_hash, and use a file-hash + size as identifier to minimize impact filenames have, but this does not affect torrents where a &quot;signature file&quot; is added also this break backwards compatibility and thats is never a good solution.<br /><br />2. Help clients to match file(s) -&gt; torrent(s), by adding one or more file-hash sums for each file in the info-dict when creating new torrents.<br /><br />(this really should be there already, I have no idea why it's not, increasing the torrent-files size by a few hundred bytes is not a big problem, but the benefits would be huge) ** Edit - file-hashes to identify files.<br /><br /><br /><br />On the client side alot can be done, like, <br /><br />Using external search systems (like the locator service i suggested) witch would download and hash the files from old torrents not having the hashes included, or just extract the hashes from torrents containing them.<br /><br />It is also possible to add file-hash search capabilities to DHT and alike to find out the info_hash(es) of torrent(s) containing the same file-hash(es) and then fetch these torrents using Magnet URIs or a similar system. <br /><br />Also to locally hash all files after a successful download, and keep a local database of &quot;file-hash -&gt; (info_hash -&gt; filename)&quot; mappings to report back to search systems or to use in a DHT-style search protocol.<br /><br />This way downloading a single file from multiple torrents (swarms) would be just like downloading the same torrents at the same time, with the only difference that the client saves the files to the same destination file on disk, this also means the when we fetch data from one swarm that data will become available to the rest of the swarms we are currently connected to, this will affect speed and availability positively once a critical number of clients would follow this behavior.<br /><br /><br />// Fredrik</p>
					<p class="postedit"><em>Last edited by Fredrik Neij (2009-10-26 00:03:07)</em></p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p711" class="blockpost roweven">
	<h2><span><span class="conr">#8&nbsp;</span><a href="viewtopic.php?pid=711#p711">2009-10-25 07:11:40</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=90545">Fredrik Neij</a></strong></dt>
					<dd class="usertitle"><strong>Member</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>I got to thinking about what protocol changes/recommendations could make it simpler to identify the same content regardless of filename, and keep the backwards compatibility, here are just some quick thoughts.<br /><br />Besides including a file-hash for each file in the info-dict witch would be the by far most effective way to identify unique files, another very simple thing .torrent-file creators could do, is to sort each file in a multifile torrent by size, with the largest first.<br /><br />In most cases this will be the file that you want and/or are in the most need of additional sources for.<br /><br />By always having the largest file at the beginning of a piece, all except of the last piece of the file will have the same piece-hashes (assuming the same piece size, and that the file spans at least 2 pieces). With this info a torrent client can search for files of the same size regardless of filename, and then compare all but the last piece-hash. <br /><br />This also work for files created with BitComet (and maybe others?) that adds padding files so each file starts with a full piece. It also works for any file that by random chance happens to start at byte 0 of a piece and is big enough to span at least two pieces.<br /><br />Another thing is to agree on a (recommended) standard piece-size for each data-size interval, to reduce the number of different info_hash values that can be created because of this value.<br /><br />Common for all of the suggestions is that there is a need for some kind of content -&gt; info_hash matching system in the end, local, client to client or central, in any case there are alot of performance- and availability-gains to get from a matching system like that.<br /><br />// Fredrik</p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p733" class="blockpost rowodd">
	<h2><span><span class="conr">#9&nbsp;</span><a href="viewtopic.php?pid=733#p733">2009-11-06 11:51:53</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89602">arvid</a></strong></dt>
					<dd class="usertitle"><strong>Administrator</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<blockquote><div class="incqbox"><h4>The 8472 wrote:</h4><p>And tbh, i don't think creating batches of torrents is a good solution, since everything in bittorrent revolves around the infohash. Things like piece picking, unchoking, DHT, peer exchange, tracker announces.. everything relies on or works most efficiently with a single ID (the infohash) being shared among all clients.</p></div></blockquote><p>I'm not sure I understand your point here. Most of the things you mention would work much more efficient if everyone in the swarm wanted to download all of the data. You would get much more uniform piece distribution among your peers.<br /><br />On the other hand, the performance improvements of having a large multi-file torrent is that the overlap of peers might be significant enough that the savings on the tracker might be significant, and you may need fewer connections to the same peers. Is that your point?<br /><br />My point is that by making it easier to search for individual files, and download that same file from multiple torrents, you encourage people to make huge torrents with tons of files in them, and the peer-overlap may be very insignificant, and you only loose performance by sticking many files in the same torrent. I think client developers and end-users are better off by sticking to the torrent concept, and somehow encourage people to make torrents that are more likely to end up with the same info-hash.<br /><br />Moving the filenames out of the info-dictionary is a totally reasonable thing to do.</p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p734" class="blockpost roweven">
	<h2><span><span class="conr">#10&nbsp;</span><a href="viewtopic.php?pid=734#p734">2009-11-06 11:58:40</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89602">arvid</a></strong></dt>
					<dd class="usertitle"><strong>Administrator</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<blockquote><div class="incqbox"><h4>Fredrik Neij wrote:</h4><p>Besides including a file-hash for each file in the info-dict witch would be the by far most effective way to identify unique files, another very simple thing .torrent-file creators could do, is to sort each file in a multifile torrent by size, with the largest first.</p></div></blockquote><p>The latest version of uTorrent does this.<br /><br /></p><blockquote><div class="incqbox"><h4>Fredrik Neij wrote:</h4><p>By always having the largest file at the beginning of a piece, all except of the last piece of the file will have the same piece-hashes (assuming the same piece size, and that the file spans at least 2 pieces). With this info a torrent client can search for files of the same size regardless of filename, and then compare all but the last piece-hash.</p></div></blockquote><p>One problem here is that the piece sizes may differ.<br /><br /></p><blockquote><div class="incqbox"><h4>Fredrik Neij wrote:</h4><p>Another thing is to agree on a (recommended) standard piece-size for each data-size interval, to reduce the number of different info_hash values that can be created because of this value.</p></div></blockquote><p>I like this idea. I wonder what would be a reasonable definition though. There may be many things to consider.<br /><br /></p><blockquote><div class="incqbox"><h4>Fredrik Neij wrote:</h4><p>Common for all of the suggestions is that there is a need for some kind of content -&gt; info_hash matching system in the end, local, client to client or central, in any case there are alot of performance- and availability-gains to get from a matching system like that.</p></div></blockquote><p>I would be inclined to initially focus on backwards compatible changes and changes geared towards making info-hashes and piece-hashes more likely to coincide.</p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p1250" class="blockpost rowodd">
	<h2><span><span class="conr">#11&nbsp;</span><a href="viewtopic.php?pid=1250#p1250">2010-03-31 13:16:30</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=90572">mabsark</a></strong></dt>
					<dd class="usertitle"><strong>Member</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>Adding the hashes into the file dictionary seems like an obvious conclusion at first. It provides the ability to share files between different torrents by shifting the focus from tracking info hashes to tracking file hashes.<br /><br />An alternative to including a file hash for each file, is to move the pieces key inside the file dictionary, creating a pieces key for each file. If you do this, you might as well move the piece length key into the file dictionary and it makes sense to do the same for the private key as well. What we end up with is a list of info dictionaries, one for each file, which could form the value for an info-list key. By adding this key to the standard torrent file, it becomes fully backwards compatible, in the same manner as the announce keys.<br /><br />The benefits to such an approach are the ability to easily perform DHT queries for individual files allowing individual file swarms, magnet compatability, backwards compatability and ease of implementation.<br /><br />The obvious downside being the approximate doubling of size of the fully compatible torrent file.</p>
					<p class="postedit"><em>Last edited by mabsark (2010-03-31 13:19:52)</em></p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p1256" class="blockpost roweven">
	<h2><span><span class="conr">#12&nbsp;</span><a href="viewtopic.php?pid=1256#p1256">2010-04-01 01:24:03</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89618">The 8472</a></strong></dt>
					<dd class="usertitle"><strong>Azureus Developer</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<blockquote><div class="incqbox"><h4>arvid wrote:</h4><blockquote><div class="incqbox"><h4>The 8472 wrote:</h4><p>And tbh, i don't think creating batches of torrents is a good solution, since everything in bittorrent revolves around the infohash. Things like piece picking, unchoking, DHT, peer exchange, tracker announces.. everything relies on or works most efficiently with a single ID (the infohash) being shared among all clients.</p></div></blockquote><p>I'm not sure I understand your point here. Most of the things you mention would work much more efficient if everyone in the swarm wanted to download all of the data. You would get much more uniform piece distribution among your peers.</p></div></blockquote><p>My point is that running 1 swarm per file out of a batch torrent would have horrible consequences for performance. So multifile torrents instead of batches of single file torrents are preferable.<br /><br /><br /></p><blockquote><div class="incqbox"><h4>arvid wrote:</h4><p>My point is that by making it easier to search for individual files, and download that same file from multiple torrents, you encourage people to make huge torrents with tons of files in them, and the peer-overlap may be very insignificant, and you only loose performance by sticking many files in the same torrent. I think client developers and end-users are better off by sticking to the torrent concept, and somehow encourage people to make torrents that are more likely to end up with the same info-hash.<br /><br />Moving the filenames out of the info-dictionary is a totally reasonable thing to do.</p></div></blockquote><p>100% agree. The ideal situation would be that the same content always generates exactly the same infohash, no matter who creates it.<br /><br />This is why<br />1. file hashes should NOT be added to the info dictionary (since they're optional)<br />2. file names should be moved outside the info dictionary (since they can change)<br />3. piece sizes should be standardized... or even irrelevant (merkle torrents)<br />4. file ordering should be deterministic (sort by file size or merkle torrents with per-file trees and sort by file root hash)<br /><br /><br />Sorting by filesize is a suboptimal solution btw... what if you have many files of the same size? Sorting based on hashes in one way or another would be preferable.</p>
				</div>
				<div class="postsignature"><hr />Az dev</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p1258" class="blockpost rowodd">
	<h2><span><span class="conr">#13&nbsp;</span><a href="viewtopic.php?pid=1258#p1258">2010-04-01 03:02:21</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=90852">ivan386</a></strong></dt>
					<dd class="usertitle"><strong>Member</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>Maybe just generate second info_hash only for hashset?</p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p1260" class="blockpost roweven">
	<h2><span><span class="conr">#14&nbsp;</span><a href="viewtopic.php?pid=1260#p1260">2010-04-01 05:16:31</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=90572">mabsark</a></strong></dt>
					<dd class="usertitle"><strong>Member</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<blockquote><div class="incqbox"><h4>The 8472 wrote:</h4><p>My point is that running 1 swarm per file out of a batch torrent would have horrible consequences for performance. So multifile torrents instead of batches of single file torrents are preferable.</p></div></blockquote><p>For torrents with a large number of files this is certainly true, but for torrents with a small number of files it could be beneficial. Adding an info-list key would allow both systems.<br /><br /></p><blockquote><div class="incqbox"><h4>The 8472 wrote:</h4><p>100% agree. The ideal situation would be that the same content always generates exactly the same infohash, no matter who creates it.<br /><br />This is why<br />1. file hashes should NOT be added to the info dictionary (since they're optional)<br />2. file names should be moved outside the info dictionary (since they can change)<br />3. piece sizes should be standardized... or even irrelevant (merkle torrents)<br />4. file ordering should be deterministic (sort by file size or merkle torrents with per-file trees and sort by file root hash)</p></div></blockquote><p>Wouldn't it be better to search for alternate sources for pieces instead of files then?<br /><br />This would only require 2 new messages:<br /><br />find-pieces: &lt;len=x&gt;&lt;id=y&gt;&lt;pieces&gt;<br />pieces: a list of 20 byte sha1 piece hashes, one for each piece to be found.<br /><br />found-pieces: &lt;len=x&gt;&lt;id=y&gt;&lt;pieces&gt;<br />pieces: a list of dictionaries, one for each piece found.<br /><br />Piece Dictionary<br />piece hash: the 20 byte sha1 piece hash of a found piece.<br />sources: a list of dictionaries, one for each torrent containing the specified piece hash.<br /><br />Source Dictionary<br />info hash: the 20 byte sha1 info hash of the torrent containing the specified piece hash key.<br />index: an integer specifying the zero-based piece index within the pieces key of the info dictionary specified by the info hash key.<br /><br />A client could find alternative sources for pieces by checking the pieces keys of torrents it knows about and by sending find-pieces messages.<br /><br />A client would respond to a find piece query by checking the pieces keys it knows about and sending a found-pieces message.<br /><br />I'm starting to like this idea more, the more I think about it. It has the possibilty to bring dead torrents back to life. It would place a greater load on the clients and bandwidth, but by how much? It could be worth it.</p>
					<p class="postedit"><em>Last edited by mabsark (2010-04-01 14:59:46)</em></p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p1262" class="blockpost rowodd">
	<h2><span><span class="conr">#15&nbsp;</span><a href="viewtopic.php?pid=1262#p1262">2010-04-01 08:37:20</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89618">The 8472</a></strong></dt>
					<dd class="usertitle"><strong>Azureus Developer</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<p>And who would you ask for that kind of information? There's no oracle that can tell you which torrent has which pieces. That method lacks scaleability and relies on coincidence too much.<br /><br /><br />No, the proper solution is simple:<br />a) there must be ONE hash to describe a specific set of data<br />b) multi-file torrents must be programmatically decomposable into single file torrents and vice versa, without having to talk to the network.<br /><br />See <a href="http://forum.bittorrent.org/viewtopic.php?pid=1196#p1196" rel="nofollow">http://forum.bittorrent.org/viewtopic.p &hellip; 1196#p1196</a><br />and <a href="http://forum.bittorrent.org/viewtopic.php?pid=1224#p1224" rel="nofollow">http://forum.bittorrent.org/viewtopic.p &hellip; 1224#p1224</a></p>
				</div>
				<div class="postsignature"><hr />Az dev</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p1266" class="blockpost roweven">
	<h2><span><span class="conr">#16&nbsp;</span><a href="viewtopic.php?pid=1266#p1266">2010-04-01 14:55:36</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=90572">mabsark</a></strong></dt>
					<dd class="usertitle"><strong>Member</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<blockquote><div class="incqbox"><h4>The 8472 wrote:</h4><p>And who would you ask for that kind of information? There's no oracle that can tell you which torrent has which pieces.</p></div></blockquote><p>Any peer that the client knows about, most of which will have a directory full of torrents that can be checked.<br /><br /></p><blockquote><div class="incqbox"><h4>The 8472 wrote:</h4><p>That method lacks scaleability and relies on coincidence too much.</p></div></blockquote><p>I've no idea what you mean by this, could you be a bit more specific.<br /><br />It scales to DHT quite easily with the addition of a new DHT query:<br /><br />find_piece<br /><br />&quot;q&quot; = &quot;find_piece&quot; <br />A find_piece query has two arguments, &quot;id&quot; containing the node ID of the querying node, and &quot;pieces&quot; a list of strings containing the hashes of the pieces being sought.<br /><br />The queried node checks every torrent file it knows about for each piece_hash specified. If the queried node finds any of the hashes, they are returned in a key &quot;values&quot; as a list of Piece Dictionaries described earlier.<br /><br />If the queried node fails to find any of the pieces, a key &quot;nodes&quot; is returned containing the K nodes in the queried nodes routing table closest to the infohash supplied in the query.<br /><br />It is highly unlikely to come across a node with an id equal to the piece hash you are looking for, but you will come across a node with no other closer nodes in it's routing table, at which point you could reverse the piece search back towards the querying node by returning the K nodes in the routing table closest to the &quot;id&quot; supplied in the query.<br /><br />As for the Merkle trees, I just don't see any point to them.</p>
					<p class="postedit"><em>Last edited by mabsark (2010-04-01 14:58:27)</em></p>
				</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div id="p1268" class="blockpost rowodd">
	<h2><span><span class="conr">#17&nbsp;</span><a href="viewtopic.php?pid=1268#p1268">2010-04-02 06:53:16</a></span></h2>
	<div class="box">
		<div class="inbox">
			<div class="postleft">
				<dl>
					<dt><strong><a href="profile.php?id=89618">The 8472</a></strong></dt>
					<dd class="usertitle"><strong>Azureus Developer</strong></dd>
					<dd class="postavatar"></dd>
				</dl>
			</div>
			<div class="postright">
				<h3> Re: Multi Source Locator Service</h3>
				<div class="postmsg">
					<blockquote><div class="incqbox"><h4>mabsark wrote:</h4><p>It scales to DHT quite easily with the addition of a new DHT query:<br /><br />find_piece<br /><br />&quot;q&quot; = &quot;find_piece&quot; <br />A find_piece query has two arguments, &quot;id&quot; containing the node ID of the querying node, and &quot;pieces&quot; a list of strings containing the hashes of the pieces being sought.<br /><br />The queried node checks every torrent file it knows about for each piece_hash specified. If the queried node finds any of the hashes, they are returned in a key &quot;values&quot; as a list of Piece Dictionaries described earlier.</p></div></blockquote><p>The DHT does not work that way.<br /><br /></p><blockquote><div class="incqbox"><p>As for the Merkle trees, I just don't see any point to them.</p></div></blockquote><p>I linked to specific posts, not the thread in general. Those specific posts contain the solution.</p>
				</div>
				<div class="postsignature"><hr />Az dev</div>
			</div>
			<div class="clearer"></div>
			<div class="postfootleft"><p>Offline</p></div>
			<div class="postfootright"><div>&nbsp;</div></div>
		</div>
	</div>
</div>

<div class="postlinksb">
	<div class="inbox">
		<p class="postlink conr">&nbsp;</p>
		<p class="pagelink conl">Pages: <strong>1</strong></p>
		<ul><li><a href="index.php">Index</a></li><li>&nbsp;&raquo;&nbsp;<a href="viewforum.php?id=25">BEPs</a></li><li>&nbsp;&raquo;&nbsp;Multi Source Locator Service</li></ul>
		<div class="clearer"></div>
	</div>
</div>

<div id="brdfooter" class="block">
	<h2><span>Board footer</span></h2>
	<div class="box">
		<div class="inbox">

			<div class="conl">
				<form id="qjump" method="get" action="viewforum.php">
					<div><label>Jump to
					<br /><select name="id" onchange="window.location=('viewforum.php?id='+this.options[this.selectedIndex].value)">
						<optgroup label="BitTorrent">
							<option value="26">Announcements</option>
							<option value="27">General</option>
							<option value="25" selected="selected">BEPs</option>
							<option value="29">BEP process</option>
							<option value="33">Research Tools</option>
							<option value="32">Cooperation between BitTorrent and ISPs</option>
							<option value="30">Attacks against BitTorrent</option>
							<option value="28">Feature Requests, Found Bugs &gt;&gt;&gt;</option>
					</optgroup>
					</select>
					<input type="submit" value=" Go " accesskey="g" />
					</label></div>
				</form>
			</div>
			<p class="conr">Powered by <a href="http://fluxbb.org/">FluxBB</a></p>
			<div class="clearer"></div>
		</div>
	</div>
</div>

</div>
</div>

<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-116155-1";
_udn = "utorrent.com";
urchinTracker();
</script>

</body>
</html>
